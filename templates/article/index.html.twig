{% extends 'base.html.twig' %}

{% block title %}Liste des Articles{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        #notification-container {
            position: fixed;
            bottom: 20px;
            left: 20px;
            z-index: 1000;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .notification {
            background-color: #d4edda;
            color: #155724;
            padding: 10px 15px;
            border-radius: 5px;
            font-size: 14px;
            box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);
            animation: fade-in 0.5s ease-out, fade-out 0.5s ease-out 2.5s;
        }

        .notification.error {
            background-color: #f8d7da;
            color: #721c24;
        }

        @keyframes fade-in {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes fade-out {
            from { opacity: 1; }
            to { opacity: 0; }
        }

        .articles-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            padding: 20px 0;
        }

        .article-card {
            background: white;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            transition: transform 0.2s ease;
            display: flex;
            flex-direction: column;
            padding: 15px;
        }

        .article-card:hover {
            transform: translateY(-5px);
        }

        .article-img {
            width: 100%;
            height: 180px;
            object-fit: cover;
            border-radius: 10px;
        }

        .article-card h3 {
            margin: 10px 0;
            font-size: 18px;
            font-weight: bold;
            color: #343a40;
        }

        .article-info {
            margin-top: 10px;
            font-size: 14px;
            color: #6c757d;
            line-height: 1.5;
            flex-grow: 1;
        }

        .article-actions {
            margin-top: 15px;
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .like-button {
            font-size: 0.9rem;
            padding: 6px 12px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        .like-button.liked {
            background-color: #dc3545;
        }

        .like-button:disabled {
            background-color: #6c757d;
            cursor: not-allowed;
        }

        .search-container {
            margin-bottom: 20px;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .search-container input {
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ced4da;
            font-size: 0.9rem;
            width: 200px;
        }

        .search-container button {
            padding: 8px 15px;
        }

        @media (max-width: 768px) {
            .articles-container {
                grid-template-columns: 1fr;
            }
            .search-container {
                flex-direction: column;
                align-items: stretch;
            }
            .search-container input {
                width: 100%;
            }
        }
    </style>
{% endblock %}

{% block body %}
<div id="notification-container"></div>

<div class="container mt-4">
    <h1 class="mb-4 text-center">Articles</h1>
    
    {% if evenement is defined %}
        <h2 class="text-center mb-4">Articles li√©s √† l'√©v√©nement: {{ evenement.nom }}</h2>
    {% endif %}

    <!-- Search Bar -->
    

    <!-- Article Cards -->
    <div class="articles-container">
        {% for article in article %}
            <div class="article-card" data-title="{{ article.titre | lower }}">
                <img src="{{ asset('uploads/images/logo2.jpg') }}" class="article-img" alt="Article image">
                <h3>{{ article.titre }}</h3>
                <p class="article-info">{{ article.contenue|u.truncate(100, '...') }}</p>
                <p>Jaimes: <span id="likes-count-{{ article.id }}">{{ article.likedByUsers|length }}</span></p>
                {% if is_granted('ROLE_PATIENT') %}
                    <div class="article-actions">
                        <button class="like-button {% if app.user and article.isLikedByUser(app.user) %}liked{% endif %}"
                                data-id="{{ article.id }}"
                                {% if not app.user %}disabled{% endif %}>
                            {% if app.user and article.isLikedByUser(app.user) %}
                                ‚ù§Ô∏è J'aime pas
                            {% else %}
                                ü§ç J'aime
                            {% endif %}
                        </button>
                        <a href="{{ path('app_article_show', {'id': article.id}) }}" class="btn btn-info btn-sm">Voir</a>
                        {% if is_granted('ROLE_MEDECIN') %}
                            <a href="{{ path('app_article_edit', {'id': article.id}) }}" class="btn btn-warning btn-sm">Modifier</a>
                        {% endif %}
                    </div>
                {% endif %}
            </div>
        {% else %}
            <p class="text-center text-muted">Aucun article trouv√©.</p>
        {% endfor %}
    </div>

    {% if is_granted('ROLE_MEDECIN') %}
        <div class="text-center mt-4">
            <a href="{{ path('app_article_new') }}" class="btn btn-primary">Cr√©er un article</a>
        </div>
    {% endif %}
    <div class="pagination-container text-center">
            {{ knp_pagination_render(article) }}
        </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Notification function
        function showNotification(message, isError = false) {
            const container = document.getElementById("notification-container");
            const notification = document.createElement("div");
            notification.classList.add("notification");
            if (isError) notification.classList.add("error");
            notification.textContent = message;
            container.appendChild(notification);
            setTimeout(() => notification.remove(), 3000);
        }

        // Function to attach event listeners to like buttons
        function attachLikeListeners() {
            document.querySelectorAll(".like-button").forEach(button => {
                // Remove existing listeners to prevent duplicates
                const newButton = button.cloneNode(true);
                button.parentNode.replaceChild(newButton, button);

                newButton.addEventListener("click", async function () {
                    const articleId = this.getAttribute("data-id");
                    const likeCountSpan = document.getElementById(`likes-count-${articleId}`);

                    try {
                        const response = await fetch(`/article/${articleId}/like`, {
                            method: "POST",
                            headers: {
                                "X-Requested-With": "XMLHttpRequest",
                                "Content-Type": "application/json"
                                // Uncomment and configure if CSRF is required
                                // "X-CSRF-Token": "{{ csrf_token('like') }}"
                            }
                        });

                        if (!response.ok) throw new Error("Network response was not ok");

                        const data = await response.json();

                        if (data.success) {
                            if (data.liked) {
                                this.classList.add("liked");
                                this.innerText = "‚ù§Ô∏è Unlike";
                                showNotification("Article aim√© !");
                            } else {
                                this.classList.remove("liked");
                                this.innerText = "ü§ç Like";
                                showNotification("Like retir√©.");
                            }
                            likeCountSpan.textContent = data.likes;
                        } else {
                            showNotification(data.message || "Une erreur est survenue.", true);
                        }
                    } catch (error) {
                        console.error("Error:", error);
                        showNotification("Une erreur est survenue.", true);
                    }
                });
            });
        }

        attachLikeListeners();

        // Filtering function
        function filterArticles() {
            const input = document.getElementById("search-input");
            const filter = input.value.toLowerCase();
            const cards = document.querySelectorAll(".article-card");

            cards.forEach(card => {
                const title = card.getAttribute("data-title");
                if (title.includes(filter)) {
                    card.style.display = "";
                } else {
                    card.style.display = "none";
                }
            });
        }
    });
</script>
{% endblock %}